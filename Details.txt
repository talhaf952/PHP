<?php
echo "1st Line\n";
echo "2nd line";
?>

PHP is an acronym for "PHP: Hypertext Preprocessor"
Not Case Sensitive Language
In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive.
However; all variable names are case-sensitive

In PHP, a variable starts with the $ sign, followed by the name of the variable:
PHP is a Loosely Typed Language
We donot have to tell PHP which data type the variable is. PHP automatically associates a data type to the variable, depending on its value.

To get the data type of a variable, use the var_dump() function.

PHP has three different variable scopes:
local
global
static

A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function:
A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function:

The global keyword is used to access a global variable from within a function.
To do this, use the global keyword before the variables (inside the function):


//Data Type
PHP supports the following data types:

String
Integer
Float (floating point numbers - also called double)
Boolean
Array
Object
NULL
Resource
You can get the data type of any object by using the var_dump() function.

//String
Strings in PHP are surrounded by either double quotation marks, or single quotation marks.
Double quoted string literals perform operations for special characters
Single quoted strings does not perform such actions, it returns the string like it was written, with the variable name


The PHP strlen() function returns the length of a string.
echo strlen("Hello world!");

The PHP str_word_count() function counts the number of words in a string.
echo str_word_count("Hello world!");

The PHP strpos() function searches for a specific text within a string.
echo strpos("Hello world!", "world");

The strtoupper() function returns the string in upper case:
$x = "Hello World!";
echo strtoupper($x);

The strtolower() function returns the string in lower case:
$x = "Hello World!";
echo strtolower($x);

The PHP str_replace() function replaces some characters with some other characters in a string.
$x = "Hello World!";
echo str_replace("World", "Dolly", $x);

The PHP strrev() function reverses a string.
$x = "Hello World!";
echo strrev($x);

Remove Whitespace
Whitespace is the space before and/or after the actual text, and very often you want to remove this space.
The trim() removes any whitespace from the beginning or the end:
$x = " Hello World! ";
echo trim($x);

Convert String into Array
The PHP explode() function splits a string into an array.
The first parameter of the explode() function represents the "separator". The "separator" specifies where to split the string.

PHP - Slicing Strings
You can return a range of characters by using the substr() function.
Start the slice at index 6 and end the slice 5 positions later:
$x = "Hello World!";
echo substr($x, 6, 5);

Slice to the End
By leaving out the length parameter, the range will go to the end

Slice From the End
Use negative indexes to start the slice from the end of the string:
Get the 3 characters, starting from the "o" in world (index -5):
$x = "Hello World!";
echo substr($x, -5, 3);

Change Data Type
Casting in PHP is done with these statements:

(string) - Converts to data type String
(int) - Converts to data type Integer
(float) - Converts to data type Float
(bool) - Converts to data type Boolean
(array) - Converts to data type Array
(object) - Converts to data type Object
(unset) - Converts to data type NULL

Cast to NULL
To cast to NULL, use the (unset) statement:
$a = 5;       // Integer
$b = 5.34;    // Float
$a = (unset) $a;
$b = (unset) $b;
var_dump($a);
var_dump($b);

PHP pi() Function
The pi() function returns the value of PI:
echo(pi());

PHP min() and max() Functions
The min() and max() functions can be used to find the lowest or highest value in a list of arguments:
echo(min(0, 150, 30, 20, -8, -200));
echo(max(0, 150, 30, 20, -8, -200));

PHP abs() Function
The abs() function returns the absolute (positive) value of a number:
echo(abs(-6.7));

PHP sqrt() Function
The sqrt() function returns the square root of a number:
echo(sqrt(64));

PHP round() Function
The round() function rounds a floating-point number to its nearest integer:
echo(round(0.60));
echo(round(0.49));

Random Numbers
The rand() function generates a random number:
echo(rand());

Create a PHP Constant
To create a constant, use the define() function.
Syntax: define(name, value, case-insensitive);
define("GREETING", "This World!", true);
echo greeting;

You can also create a constant by using the const keyword.
const GREETING = "This World!";
echo GREETING;

const vs. define()

const are always case-sensitive
define() has has a case-insensitive option.
const cannot be created inside another block scope, like inside a function or inside an if statement.
define can be created inside another block scope.

Constants are Global
Constants are automatically global and can be used across the entire script.


PHP Predefined Constants
PHP has nine predefined constants that change value depending on where they are used, and therefor they are called "magic constants".
These magic constants are written with a double underscore at the start and the end, except for the ClassName::class constant

__CLASS__	If used inside a class, the class name is returned.	
__DIR__	The directory of the file.	
__FILE__	The file name including the full path.	
__FUNCTION__	If inside a function, the function name is returned.	
__LINE__	The current line number.	
__METHOD__	If used inside a function that belongs to a class, both class and function name is returned.	
__NAMESPACE__	If used inside a namespace, the name of the namespace is returned.	
__TRAIT__	If used inside a trait, the trait name is returned.	
ClassName::class	Returns the name of the specified class and the name of the namespace, if any.

PHP Operators
Operators are used to perform operations on variables and values.

PHP divides the operators in the following groups:

Arithmetic operators
Assignment operators
Comparison operators
Increment/Decrement operators
Logical operators
String operators
Array operators
Conditional assignment operators

//PHP Functions
PHP Function Arguments
Information can be passed to functions through arguments. An argument is just like a variable.
Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma

Passing Arguments by Reference
In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed.
When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used

Variable Number of Arguments
By using the ... operator in front of the function parameter, the function accepts an unknown number of arguments. This is also called a *variadic or splat function*.
