<?php
echo "1st Line\n";
echo "2nd line";
?>

PHP is an acronym for "PHP: Hypertext Preprocessor"
Not Case Sensitive Language
In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive.
However; all variable names are case-sensitive

In PHP, a variable starts with the $ sign, followed by the name of the variable:
PHP is a Loosely Typed Language
We donot have to tell PHP which data type the variable is. PHP automatically associates a data type to the variable, depending on its value.

To get the data type of a variable, use the var_dump() function.

PHP has three different variable scopes:
local
global
static

A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function:
A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function:

The global keyword is used to access a global variable from within a function.
To do this, use the global keyword before the variables (inside the function):


//Data Type
PHP supports the following data types:

String
Integer
Float (floating point numbers - also called double)
Boolean
Array
Object
NULL
Resource
You can get the data type of any object by using the var_dump() function.

//String
Strings in PHP are surrounded by either double quotation marks, or single quotation marks.
Double quoted string literals perform operations for special characters
Single quoted strings does not perform such actions, it returns the string like it was written, with the variable name


The PHP strlen() function returns the length of a string.
echo strlen("Hello world!");

The PHP str_word_count() function counts the number of words in a string.
echo str_word_count("Hello world!");

The PHP strpos() function searches for a specific text within a string.
echo strpos("Hello world!", "world");

The strtoupper() function returns the string in upper case:
$x = "Hello World!";
echo strtoupper($x);

The strtolower() function returns the string in lower case:
$x = "Hello World!";
echo strtolower($x);

The PHP str_replace() function replaces some characters with some other characters in a string.
$x = "Hello World!";
echo str_replace("World", "Dolly", $x);

The PHP strrev() function reverses a string.
$x = "Hello World!";
echo strrev($x);

Remove Whitespace
Whitespace is the space before and/or after the actual text, and very often you want to remove this space.
The trim() removes any whitespace from the beginning or the end:
$x = " Hello World! ";
echo trim($x);

Convert String into Array
The PHP explode() function splits a string into an array.
The first parameter of the explode() function represents the "separator". The "separator" specifies where to split the string.

PHP - Slicing Strings
You can return a range of characters by using the substr() function.
Start the slice at index 6 and end the slice 5 positions later:
$x = "Hello World!";
echo substr($x, 6, 5);

Slice to the End
By leaving out the length parameter, the range will go to the end

Slice From the End
Use negative indexes to start the slice from the end of the string:
Get the 3 characters, starting from the "o" in world (index -5):
$x = "Hello World!";
echo substr($x, -5, 3);

Change Data Type
Casting in PHP is done with these statements:

(string) - Converts to data type String
(int) - Converts to data type Integer
(float) - Converts to data type Float
(bool) - Converts to data type Boolean
(array) - Converts to data type Array
(object) - Converts to data type Object
(unset) - Converts to data type NULL

Cast to NULL
To cast to NULL, use the (unset) statement:
$a = 5;       // Integer
$b = 5.34;    // Float
$a = (unset) $a;
$b = (unset) $b;
var_dump($a);
var_dump($b);

PHP pi() Function
The pi() function returns the value of PI:
echo(pi());

PHP min() and max() Functions
The min() and max() functions can be used to find the lowest or highest value in a list of arguments:
echo(min(0, 150, 30, 20, -8, -200));
echo(max(0, 150, 30, 20, -8, -200));

PHP abs() Function
The abs() function returns the absolute (positive) value of a number:
echo(abs(-6.7));

PHP sqrt() Function
The sqrt() function returns the square root of a number:
echo(sqrt(64));

PHP round() Function
The round() function rounds a floating-point number to its nearest integer:
echo(round(0.60));
echo(round(0.49));

Random Numbers
The rand() function generates a random number:
echo(rand());

Create a PHP Constant
To create a constant, use the define() function.
Syntax: define(name, value, case-insensitive);
define("GREETING", "This World!", true);
echo greeting;

You can also create a constant by using the const keyword.
const GREETING = "This World!";
echo GREETING;

const vs. define()

const are always case-sensitive
define() has has a case-insensitive option.
const cannot be created inside another block scope, like inside a function or inside an if statement.
define can be created inside another block scope.

Constants are Global
Constants are automatically global and can be used across the entire script.


PHP Predefined Constants
PHP has nine predefined constants that change value depending on where they are used, and therefor they are called "magic constants".
These magic constants are written with a double underscore at the start and the end, except for the ClassName::class constant

__CLASS__	If used inside a class, the class name is returned.	
__DIR__	The directory of the file.	
__FILE__	The file name including the full path.	
__FUNCTION__	If inside a function, the function name is returned.	
__LINE__	The current line number.	
__METHOD__	If used inside a function that belongs to a class, both class and function name is returned.	
__NAMESPACE__	If used inside a namespace, the name of the namespace is returned.	
__TRAIT__	If used inside a trait, the trait name is returned.	
ClassName::class	Returns the name of the specified class and the name of the namespace, if any.

PHP Operators
Operators are used to perform operations on variables and values.

PHP divides the operators in the following groups:

Arithmetic operators
Assignment operators
Comparison operators
Increment/Decrement operators
Logical operators
String operators
Array operators
Conditional assignment operators

//PHP Functions
PHP Function Arguments
Information can be passed to functions through arguments. An argument is just like a variable.
Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma

Passing Arguments by Reference
In PHP, arguments are usually passed by value, which means that a copy of the value is used in the function and the variable that was passed into the function cannot be changed.
When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function argument into a reference, the & operator is used

Variable Number of Arguments
By using the ... operator in front of the function parameter, the function accepts an unknown number of arguments. This is also called a *variadic or splat function*.

What is an Array?
An array is a special variable that can hold many values under a single name, and you can access the values by referring to an index number or name.
PHP Array Types
In PHP, there are three types of arrays:

Indexed arrays - Arrays with a numeric index
Associative arrays - Arrays with named keys
Multidimensional arrays - Arrays containing one or more arrays

Create Arrays
Access Arrays
Update Arrays
Remove Array Items
Sort Arrays

Array items of four different data types:
PHP Indexed Arrays
In indexed arrays each item has an index number.
By default, the first item has index 0, the second item has item 1, etc.
Access Indexed Arrays
To access an array item you can refer to the index number.
Change Value
To change the value of an array item, use the index number:
To loop through and print all the values of an indexed array, you could use a foreach loop

PHP Associative Arrays
Associative arrays are arrays that use named keys that you assign to them.

Create Array
You can create arrays by using the array() function:
Can also use a shorter syntax by using the [] brackets:
Trailing Comma: A comma after the last item is allowed
To remove an existing item from an array, you can use the unset() function.
If you want the array to re-arrange the indexes, you can use the array_splice() function.
With the array_splice() function you specify the index (where to start) and how many items you want to delete. After the deletion, the array gets reindexed automtically, starting at index 0.

ort Functions For Arrays
sort() - sort arrays in ascending order
rsort() - sort arrays in descending order
asort() - sort associative arrays in ascending order, according to the value
ksort() - sort associative arrays in ascending order, according to the key
arsort() - sort associative arrays in descending order, according to the value
krsort() - sort associative arrays in descending order, according to the key

Multidimensional Arrays
A multidimensional array is an array containing one or more arrays

Global Variables - Superglobals
Some predefined variables in PHP are "superglobals", which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special.
The PHP superglobal variables are:
$GLOBALS
$_SERVER
$_REQUEST
$_POST
$_GET
$_FILES
$_ENV
$_COOKIE
$_SESSION



$_SERVER
$_SERVER is a PHP super global variable which holds information about headers, paths, and script locations.
echo $_SERVER['PHP_SELF'];
echo $_SERVER['SERVER_NAME'];
echo $_SERVER['HTTP_HOST'];
echo $_SERVER['HTTP_REFERER'];
echo $_SERVER['HTTP_USER_AGENT'];
echo $_SERVER['SCRIPT_NAME'];

$_REQUEST
$_REQUEST is a PHP super global variable which contains submitted form data, and all cookie data.
In other words, $_REQUEST is an array containing data from $_GET, $_POST, and $_COOKIE.
When a user clicks the submit button, the form data is sent to a PHP file specified in the action attribute of the <form> tag.
In the action file we can use the $_REQUEST variable to collect the value of the input field.

PHP $_POST
$_POST contains an array of variables received via the HTTP POST method.
There are two main ways to send variables via the HTTP Post method:
HTML forms
JavaScript HTTP requests

PHP $_GET
$_GET contains an array of variables received via the HTTP GET method.
There are two main ways to send variables via the HTTP GET method:
Query strings in the URL
HTML Forms

Regular Expressions
A regular expression is a sequence of characters that forms a search pattern. When you search for data in a text, you can use this search pattern to describe what you are searching for.
A regular expression can be a single character, or a more complicated pattern.

Regular expressions can be used to perform all types of text search and text replace operations.

Regular Expression:
Regular expression is a sequence of characters that forms a search pattern. When you search for data in text, you can use this search pattern to describe
what you are searching for.
Syntaxx:
$exp="/tutorialspoint/i";
'/' is delimeter, 'tutorialspoint' is pattern, 'i' is the modifier as case sensitive.

Function	Description
preg_match()	Returns 1 if the pattern was found in the string and 0 if not
preg_match_all()	Returns the number of times the pattern was found in the string, which may also be 0
preg_replace()	Returns a new string where matched patterns have been replaced with another string.
Using preg_match():
$str = "Visit W3Schools";
$pattern = "/w3schools/i";

Using preg_match_all()
$str = "The rain in SPAIN falls mainly on the plains.";
$pattern = "/ain/i";
echo preg_match_all($pattern, $str); // Outputs 4
?>

Using preg_replace()
<?php
$str = "Visit Microsoft!";
$pattern = "/microsoft/i";
echo preg_replace($pattern, "W3Schools", $str); // Outputs "Visit W3Schools!"
?>

Regular Expression Modifiers
Modifier	Description
i	Performs a case-insensitive search	
m	Performs a multiline search (patterns that search for the beginning or end of a string will match the beginning or end of each line)
u	Enables correct matching of UTF-8 encoded patterns

Regular Expression Patterns
Expression	Description
[abc]	Find one character from the options between the brackets
[^abc]	Find any character NOT between the brackets
[0-9]	Find one character from the range 0 to 9

If your expression needs to search for one of the special characters you can use a backslash ( \ ) to escape them. For example, to search 
for one or more question marks you can use the following expression: $pattern = '/\?+/';

Grouping:
You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be used to select parts of the pattern to be used as a match.
Use grouping to search for the word "banana" by looking for ba followed by two instances of na:

<?php
$str = "Apples and bananas.";
$pattern = "/ba(na){2}/i";
echo preg_match($pattern, $str); // Outputs 1
?>
